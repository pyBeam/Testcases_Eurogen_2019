---------------------------------------------------------------------------
|                                                                         |
| pyBeam, a Beam Solver (AD) - Release 0.1 (beta)                         |
|                            - https://github.com/rsanfer/pyBeam          |
|                                                                         |
---------------------------------------------------------------------------
|                                                                         |
| Copyright 2018-2019 Rocco Bombardieri (Carlos III University Madrid)    |
|                     Rauno Cavallaro (Carlos III University Madrid)      |
|                     Tim Albring (SciComp, TU Kaiserslautern)            |
|                     Ruben Sanchez (SciComp, TU Kaiserslautern)          |
|                                                                         |
| pyBeam is free software: you can redistribute it and/or                 |
| modify it under the terms of the GNU Affero General Public License      |
| as published by the Free Software Foundation, either version 3 of the   |
| License, or (at your option) any later version.                         |
|                                                                         |
| pyBeam is distributed in the hope that it will be useful,               |
| but WITHOUT ANY WARRANTY; without even the implied warranty             |
| of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                 |
| See the GNU Affero General Public License for more details.             |
|                                                                         |
| You should have received a copy of the GNU Affero                       |
| General Public License along with pyBeam.                               |
| If not, see <http://www.gnu.org/licenses/>.                             |
|                                                                         |
---------------------------------------------------------------------------

FOLLOWER_FLAG is an invalid option !
FullPivHouseholderQr
--> Reading mesh file: /media/rocco/290CF0EB732D1122/Adjoint_project/pyBeam/tests/Eurogen/Adjoint/CASE3/mesh_str.msh.
--> Reading property file: /media/rocco/290CF0EB732D1122/Adjoint_project/pyBeam/tests/Eurogen/Adjoint/CASE3/property_n.prt.
--> Initialization successful
--> Node Structure Initialization... ok!
--> Finite Element Initialization... ok!
--> Initialization successful

---------------------------------------------------------------------------

--> Setting External Forces
--> Initializing from restart file
--> Starting Restart Sequence
===========================================================================
    Iter      Log10(Res)   Log10(Lin_Sol)     Log10(Disp) Log10(Disp_Fact)
 RESTART       -1.793388       -14.935360       -6.911235        -8.091393
===========================================================================

--> Exiting Restart Sequence.
objective_function = 0.059010
('Objective Function - Displacement(', 19, ') = ', 0.05900983785219774)
0.05900983785219773847
("E', Nu' = (", -8.296800928148253e-08, -3.399878994683794e-05, ')')
("F'(", 0, ') = (', 0.0, 0.0, 0.0, ')')
("F'(", 1, ') = (', -1.081007242996652e-05, -3.350347695645643e-05, 0.007313240240965087, ')')
("F'(", 2, ') = (', -0.00010842672960877647, -0.0002913745601925245, 0.02872669421354263, ')')
("F'(", 3, ') = (', -0.00035798285138584715, -0.0009450647814168083, 0.06343714663363056, ')')
("F'(", 4, ') = (', -0.0008027378849498462, -0.0021137128244757067, 0.11065668201859426, ')')
("F'(", 5, ') = (', -0.0014676734534112585, -0.0038719967319649396, 0.1695998166704778, ')')
("F'(", 6, ') = (', -0.0023625021946949427, -0.0062566630708602135, 0.23946110255741546, ')')
("F'(", 7, ') = (', -0.0034852635135561643, -0.009274680428127104, 0.3194548163783153, ')')
("F'(", 8, ') = (', -0.004912253611762482, -0.013166923987762535, 0.4125858236847576, ')')
("F'(", 9, ') = (', -0.006723137573574763, -0.018185739945911928, 0.5213726935952483, ')')
("F'(", 10, ') = (', -0.008888218839198677, -0.024282128108843257, 0.6443965961139535, ')')
("F'(", 11, ') = (', -0.011365879252671154, -0.03136951399437007, 0.7802323697138714, ')')
("F'(", 12, ') = (', -0.014108527888077654, -0.03933789374382575, 0.9274688992410782, ')')
("F'(", 13, ') = (', -0.01706603196605151, -0.04806177079752647, 1.0846653724804571, ')')
("F'(", 14, ') = (', -0.020190791635490903, -0.05741305371259243, 1.2504121268524166, ')')
("F'(", 15, ') = (', -0.023547733605214033, -0.06774695983406251, 1.430278250811702, ')')
("F'(", 16, ') = (', -0.027159734616719725, -0.07927762541011474, 1.6277708445676158, ')')
("F'(", 17, ') = (', -0.030922615251142243, -0.09166275862708166, 1.838500279253625, ')')
("F'(", 18, ') = (', -0.03475950617275617, -0.10458376628308662, 2.0581141861432655, ')')
("F'(", 19, ') = (', -0.03861774148180485, -0.11774619253337451, 2.2821214752293497, ')')
("F'(", 20, ') = (', 4.801847519e-314, 1.2633e-320, 2.220646e-317, ')')
("F'(", 21, ') = (', 6.608900575536593e-05, 0.00017110089009667262, -0.020427571789949528, ')')
("F'(", 22, ') = (', 0.00016166993995061257, 0.0004296194663500756, -0.023950448872192345, ')')
("F'(", 23, ') = (', 0.0001728833376206542, 0.00048481219675930627, -0.011474592211959012, ')')
("F'(", 24, ') = (', 1.849956243108127e-05, 0.0001226919078002767, 0.01608496754166054, ')')
("F'(", 25, ') = (', -0.0003552999415456574, -0.0008053840496404121, 0.0578316876013562, ')')
("F'(", 26, ') = (', -0.0009789415971042687, -0.0023914015569322503, 0.112850649494701, ')')
("F'(", 27, ') = (', -0.0018643186332057246, -0.004681532607328665, 0.1802488134937121, ')')
("F'(", 28, ') = (', -0.002886395506274736, -0.007272136523651016, 0.251065639775185, ')')
("F'(", 29, ') = (', -0.00436515929013167, -0.011139851968127081, 0.3412432935202917, ')')
("F'(", 30, ') = (', -0.006281753214576157, -0.01628029443636959, 0.44915519658126385, ')')
("F'(", 31, ') = (', -0.008595604086582316, -0.022626627590292825, 0.5731747080183247, ')')
("F'(", 32, ') = (', -0.011253083164935127, -0.030069870731017804, 0.7117029161055892, ')')
("F'(", 33, ') = (', -0.014192542725331074, -0.0384699928908809, 0.863086067570352, ')')
("F'(", 34, ') = (', -0.017352997180529937, -0.04767759403176822, 1.0257318241126296, ')')
("F'(", 35, ') = (', -0.02075867100313142, -0.05735502733437336, 1.1878425856205646, ')')
("F'(", 36, ') = (', -0.024523214578992272, -0.06863462561851086, 1.374804716921172, ')')
("F'(", 37, ') = (', -0.028484209372692984, -0.08108445136484076, 1.5816278885313804, ')')
("F'(", 38, ') = (', -0.032515562168677244, -0.09429563070005115, 1.8033595635485755, ')')
("F'(", 39, ') = (', -0.03653130142727864, -0.1079014237238587, 2.034946975076293, ')')
("F'(", 40, ') = (', 0.0, 0.0, 0.0, ')')
("F'(", 41, ') = (', -0.00012693031917645383, -0.0003420666923434391, 0.048923487872862485, ')')
("F'(", 42, ') = (', -0.0005150187716952615, -0.0013759757871238615, 0.10774054488780184, ')')
("F'(", 43, ') = (', -0.001156321039588401, -0.0030942820717201175, 0.1758058286334542, ')')
("F'(", 44, ') = (', -0.0020371068638232654, -0.0054737576175542995, 0.2525156935219005, ')')
("F'(", 45, ') = (', -0.0031390277403643184, -0.00847795515329646, 0.3372498349269235, ')')
("F'(", 46, ') = (', -0.004440752101690391, -0.012060824527644875, 0.4293697138274295, ')')
("F'(", 47, ') = (', -0.00591978346225124, -0.01617119584663876, 0.5282687431309064, ')')
("F'(", 48, ') = (', -0.007954252250354635, -0.02201611870092642, 0.6548658307869376, ')')
("F'(", 49, ') = (', -0.010263275407408073, -0.02876152242688585, 0.791566479154671, ')')
("F'(", 50, ') = (', -0.012800849652575389, -0.03629124059553512, 0.9372503902295397, ')')
("F'(", 51, ') = (', -0.015523789146106375, -0.04448915078427399, 1.0908012053599159, ')')
("F'(", 52, ') = (', -0.01839409415189735, -0.05324533281994145, 1.2511219804682316, ')')
("F'(", 53, ') = (', -0.02137809719980907, -0.062453481727920715, 1.4170289035992003, ')')
("F'(", 54, ') = (', -0.024448806781076624, -0.07201918081899912, 1.5874268328270318, ')')
("F'(", 55, ') = (', -0.027732105051472028, -0.08333639257014752, 1.7939138145892408, ')')
("F'(", 56, ') = (', -0.031114991247410417, -0.0952433095252717, 2.0072192738785053, ')')
("F'(", 57, ') = (', -0.03458039034613067, -0.10753111947392259, 2.223827680586622, ')')
("F'(", 58, ') = (', -0.038124982046250776, -0.12001526769656644, 2.440252031295234, ')')
("F'(", 59, ') = (', -0.04174657141857025, -0.13251176540785564, 2.652889131720559, ')')
("F'(", 60, ') = (', 0.0, 0.0, 0.0, ')')
("F'(", 61, ') = (', -0.0034036238697754697, -0.007341983714654359, 0.007241152142799937, ')')
("F'(", 62, ') = (', -0.006552111592697372, -0.014177054117971818, 0.02846970689807445, ')')
("F'(", 63, ') = (', -0.009520906816677333, -0.020697091123950198, 0.06292346346190517, ')')
("F'(", 64, ') = (', -0.012369250525745822, -0.02705355416433072, 0.10984753980901361, ')')
("F'(", 65, ') = (', -0.01513598180264996, -0.033350653666843054, 0.16848254005402796, ')')
("F'(", 66, ') = (', -0.017844304269133235, -0.03965288358060688, 0.2380429904779615, ')')
("F'(", 67, ') = (', -0.020511124160132767, -0.04600797165514543, 0.3177572911176986, ')')
("F'(", 68, ') = (', -0.024664752394124172, -0.055794046667023395, 0.4103800316438412, ')')
("F'(", 69, ') = (', -0.02874840472328677, -0.065729135343275, 0.5187052129698533, ')')
("F'(", 70, ') = (', -0.03275805752898162, -0.07581838907488035, 0.6413327717858155, ')')
("F'(", 71, ') = (', -0.03667685032243824, -0.08602764594228665, 0.7768476820226385, ')')
("F'(", 72, ') = (', -0.04049067975941152, -0.09631889793275807, 0.9238406655744463, ')')
("F'(", 73, ') = (', -0.04415548801075392, -0.10657828359260367, 1.0808714437692757, ')')
("F'(", 74, ') = (', -0.04765578561306419, -0.11674727739313549, 1.2465234431941412, ')')
("F'(", 75, ') = (', -0.053176972959946715, -0.13177340583667466, 1.42601038974091, ')')
("F'(", 76, ') = (', -0.0580838237198323, -0.1461147412482611, 1.6232888991198828, ')')
("F'(", 77, ') = (', -0.06232060319964014, -0.15953286634087951, 1.833950824020011, ')')
("F'(", 78, ') = (', -0.06589395557671195, -0.17188837653730046, 2.053616161079253, ')')
("F'(", 79, ') = (', -0.06882167496720924, -0.1830394333187483, 2.277769271153134, ')')
("F'(", 80, ') = (', 0.0, 0.0, 0.0, ')')
("F'(", 81, ') = (', 0.00338200684892447, 0.007274973184284834, 0.0073853283667860235, ')')
("F'(", 82, ') = (', 0.00633526393241262, 0.01359429782638453, 0.028983681069822364, ')')
("F'(", 83, ') = (', 0.008804949068954597, 0.018806950838060034, 0.06395082975256018, ')')
("F'(", 84, ') = (', 0.010763800158104941, 0.022826115314009663, 0.11146582836916577, ')')
("F'(", 85, ') = (', 0.012200645369768727, 0.025606643259603705, 0.17071709304757704, ')')
("F'(", 86, ') = (', 0.013119277188962875, 0.02713953760797494, 0.24087917382161328, ')')
("F'(", 87, ') = (', 0.01354060792920491, 0.027458589342770394, 0.3211523410329093, ')')
("F'(", 88, ') = (', 0.014840219195605098, 0.029460174227572116, 0.41479156366556896, ')')
("F'(", 89, ') = (', 0.015302140371339491, 0.02935762813135917, 0.5240401729053374, ')')
("F'(", 90, ') = (', 0.01498164872397126, 0.027254102904315503, 0.6474604583152226, ')')
("F'(", 91, ') = (', 0.013945100563308227, 0.02328858821127767, 0.7836170558212858, ')')
("F'(", 92, ') = (', 0.012273631267356894, 0.017643080917253896, 0.9310971313020749, ')')
("F'(", 93, ') = (', 0.010023428187366627, 0.010454709500241782, 1.0884593664752495, ')')
("F'(", 94, ') = (', 0.00727420653948118, 0.0019211430512481795, 1.2543008092016132, ')')
("F'(", 95, ') = (', 0.006081508739359231, -0.003720540219054139, 1.4345461103156183, ')')
("F'(", 96, ') = (', 0.0037643562647020176, -0.012440534081115999, 1.6322527888098652, ')')
("F'(", 97, ') = (', 0.0004753734035114281, -0.023792672260075594, 1.843049733434091, ')')
("F'(", 98, ') = (', -0.003625056846176697, -0.03727917322731374, 2.0626122097430697, ')')
("F'(", 99, ') = (', -0.0084138256511305, -0.05245296538045491, 2.286473677823532, ')')

